/****************************************************************************
General
****************************************************************************/
	QWidget
	{
		background-color: rgba(255, 255, 255, 255);
	}
	QWidget#page, page_2
	{
		background: transparent;
	}
	QFrame,
	QStackedWidget
	{
		background: none;
	}
	QMainWindow
	{
		background: none;
	}
	QHeaderView,
	QMdiArea::background
	{
		background-color: rgba(215, 215, 215, 255);
	}
	QTableCornerButton::section,
	QHeaderView::section
	{
		border-top: none;
		border-left: none;
		border-right: 1px solid rgba(255, 255, 255, 255);
		border-bottom: 1px solid rgba(255, 255, 255, 255);
		background-color: rgba(215, 215, 215, 255);
	}
	QTableView::item,
	QTableWidget::item,
	QTreeView::item
	{
		background-color: rgba(255, 255, 255, 255);
	}
	QLineEdit,
	QSpinBox,
	QDoubleSpinBox,
	QProgressBar,
	QComboBox
	{
		background: qlineargradient(spread:pad,
			x1:0, y1:0,
			x2:0, y2:1,
			stop:0 rgba(235, 235, 235, 255),
			stop:0.617 rgba(216, 216, 216, 255),
			stop:1 rgba(205, 205, 205, 255)
		);
	}
	QLineEdit:hover,
	QSpinBox:hover,
	QDoubleSpinBox:hover,
	QComboBox:hover
	{
		background: qlineargradient(spread:pad,
			x1:0, y1:0,
			x2:0, y2:1,
			stop:0 rgba(229, 229, 229, 255),
			stop:0.617 rgba(210, 210, 210, 255),
			stop:1 rgba(199, 199, 199, 255)
		);
	}
	QComboBox,
	QDockWidget::title,
	QDoubleSpinBox,
	QLineEdit,
	QListWidget,
	QProgressBar,
	QSlider::groove:horizontal,
	QSpinBox,
	QTabBar::tab,
	QWidget[qssClass="jobList"]
	{
		border: 1px solid rgba(155, 155, 155, 255);
	}
/****************************************************************************
QToolBar
QStatusBar
QToolButton
****************************************************************************/
	QToolBar,
	QStatusBar
	{
		color: rgba(25, 25, 25, 255);
		spacing: 0;
	}
	QToolBar
	{
		border-top: 1px solid rgba(255, 255, 255, 255);
		border-bottom: 1px solid rgba(205, 205, 205, 255);
		color: rgba(25, 25, 25, 255);
	}
	QToolButton
	{
		background: transparent;
		border: 1px solid rgba(0, 0, 0, 0);
	}
	QToolButton:hover
	{
		/* needs to be _before_ :pressed for some peculiar precedence reason (in dark.qss, it _only works_ in reverse order!). See also QPushButton */
		background-color: rgba(150,186,230, 128);
	}
	QToolButton:pressed
	{
		background: qlineargradient(spread:pad,
			x1:0, y1:0,
			x2:0, y2:1,
			stop:0 rgba(70, 122, 201, 255),
			stop:0.381 rgba(100, 146, 212, 255),
			stop:1 rgba(150, 186, 230, 255)
		);
	}
	QToolButton:checked
	{
		background: qlineargradient(spread:pad,
			x1:0, y1:0,
			x2:0, y2:1,
			stop:0 rgba(235, 235, 235, 255),
			stop:0.617 rgba(216, 216, 216, 255),
			stop:1 rgba(205, 205, 205, 255)
		);
		border: 1px inset rgba(165, 165, 165, 255);
	}
	QToolBar::separator
	{
		margin-top: 5px;
		margin-bottom: 5px;
		background-color: rgba(205, 205, 205, 255);
		width: 1px;
	}
	QToolBar QToolButton
	{
		width: 24px;
	}
/****************************************************************************
QMenuBar
****************************************************************************/
	QMenuBar
	{
		background-color: rgba(255, 255, 255, 255);
	}
	QMenuBar::item
	{
		spacing: 3px; /* spacing between menu bar items */
		padding: 6px 12px;
		background: transparent;
		color: rgba(25, 25, 25, 255);
	}
	QMenuBar::item:selected
	{
		/* when selected using mouse or keyboard */
		background-color: rgba(90, 90, 90, 255);
		color: rgba(255, 168, 0, 255);
	}
	QMenuBar::item:pressed
	{
		background-color: rgba(90, 90, 90, 255);
	}
/****************************************************************************
QMenu
****************************************************************************/
	QMenu
	{
		background-color: rgba(255, 255, 255, 255); /* sets background of the menu */
		/*border: 1px solid black;*/
	}
	QMenu::item
	{
		/*background-color: rgba(255, 255, 255, 255);*/ /* do not use 'transparent' here, otherwise checked menu entries with colors don't get properly highlighted! */
		color: rgba(25, 25, 25, 255);
	}
	QMenu::item:selected
	{	/* when user selects item using mouse or keyboard */
		background-color: rgba(90, 90, 90, 255);
		color: rgba(255, 168, 0, 255);
	}
	QMenu::separator
	{
		height: 1px;
		background-color: rgba(205, 205, 205, 255);
	}
	/*
	QMenu::item:checked     // styling for checked menu entries
	QMenu::item:unchecked
	*/
/****************************************************************************
QPushButton
****************************************************************************/
	QPushButton
	{
		border: 1px outset rgba(215, 215, 215, 255);
		padding: 0px 6px;
		min-width: 2em;
		min-height: 1.5em;
		color: rgba(25, 25, 25, 255);
		background: qlineargradient(spread:pad,
			x1:0, y1:0,
			x2:0, y2:1,
			stop:0 rgba(195, 195, 195, 255),
			stop:0.617 rgba(170, 170, 170, 255),
			stop:1 rgba(155, 155, 155, 255)
		);
	}
	QPushButton:hover
	{
		/* needs to be _before_ :pressed for some peculiar precedence reason (in dark.qss, it _only works_ in reverse order!). See also QToolButton */
		border: 1px outset rgba(170, 206, 250, 255);
		background: qlineargradient(spread:pad,
			x1:0, y1:0,
			x2:0, y2:1,
			stop:0 rgba(150, 186, 230, 255),
			stop:0.617 rgba(100, 146, 212, 255),
			stop:1 rgba(70, 122, 201, 255)
		);
	}
	QPushButton:pressed
	{
		border: 1px solid rgba(170, 206, 250, 255);
		background: qlineargradient(spread:pad,
			x1:0, y1:0,
			x2:0, y2:1,
			stop:0 rgba(70, 122, 201, 255),
			stop:0.381 rgba(100, 146, 212, 255),
			stop:1 rgba(150, 186, 230, 255)
		);
	}
	QPushButton:flat
	{
		border: none; /* no border for a flat push button */
		background: transparent;
	}
	QPushButton:default
	{
		border: 1px outset rgba(165, 165, 165, 255);
	}
	/*****************************************************************************/
	/* Button icons (data dialog, FeatureScout class list, FeatureAnalyzer
       computations module, annotations list, etc.)                              */
	QToolButton[objectName="add_class"],
	QToolButton[objectName="pbAdd"],
	QPushButton[objectName="pbAdd"]  { qproperty-icon: url(:/images/plus.svg);  }
	QToolButton[objectName="delete_class"],
	QToolButton[objectName="pbRemove"],
	QPushButton[objectName="pbRemove"] { qproperty-icon: url(:/images/minus.svg); }
	QToolButton[objectName="tbEdit"] { qproperty-icon: url(:/images/edit.svg);  }
	QToolButton[objectName="pushPX"] { qproperty-icon: url(:/images/px.svg); }
	QToolButton[objectName="pushPY"] { qproperty-icon: url(:/images/py.svg); }
	QToolButton[objectName="pushPZ"] { qproperty-icon: url(:/images/pz.svg); }
	QToolButton[objectName="pushMX"] { qproperty-icon: url(:/images/mx.svg); }
	QToolButton[objectName="pushMY"] { qproperty-icon: url(:/images/my.svg); }
	QToolButton[objectName="pushMZ"] { qproperty-icon: url(:/images/mz.svg); }
	QToolButton[objectName="pushIso"] { qproperty-icon: url(:/images/iso.svg); }
	QToolButton[objectName="pbToggleInteraction"] { qproperty-icon: url(:/images/mouse-dot.svg); }
	QToolButton[objectName="push3DView"],
	QToolButton[objectName="pushRaycast"],
	QToolButton[objectName="pushStability"],
	QToolButton[objectName="pushPlacements"],
	QToolButton[objectName="pushMaxTab"],
	QToolButton[objectName="tbMax"] { qproperty-icon: url(:/images/zoom-in.svg); }
	QToolButton[objectName="tb_opends"],
	QToolButton[objectName="load_class"],
	QToolButton[objectName="tbLoadTable"] { qproperty-icon: url(:/images/load.svg); }
	QToolButton[objectName="tb_specifyds"],
	QToolButton[objectName="save_class"],
	QToolButton[objectName="tbSave"],
	QToolButton[objectName="tb_saveVolume"],
	QToolButton[objectName="tb_saveStl"],
	QToolButton[objectName="tbSaveSettings"],
	QToolButton[objectName="tbSaveTable"] { qproperty-icon: url(:/images/save.svg); }
	QToolButton[objectName="pbSaveStack"] { qproperty-icon: url(:/images/save-all.svg); }
	QToolButton[objectName="export_class"],
	QToolButton[objectName="pbSaveScreen"] { qproperty-icon: url(:/images/image.svg); }
	QToolButton[objectName="tbReload"],
	QToolButton[objectName="updateEvents"] { qproperty-icon: url(:/images/update.svg); }
	QToolButton[objectName="pbSaveMovie"] { qproperty-icon: url(:/images/movie.svg); }
	QToolButton[objectName="pbAbort"] { qproperty-icon: url(:/images/close.svg); }
	QToolButton[objectName="tbAddPoint"] { qproperty-icon: url(:/images/function-point-add.svg); }
	QToolButton[objectName="tbRemovePoint"] { qproperty-icon: url(:/images/function-point-remove.svg); }
	QToolButton[objectName="distributionCSV"] { qproperty-icon: url(:/images/histogram.svg); }
	QToolButton[objectName="savexml"] { qproperty-icon: url(:/images/xml-save.svg); }
	QToolButton[objectName="pb_ModTF"] { qproperty-icon: url(:/images/histogram-tf.svg); }


/****************************************************************************
QTabWidget
QTabBar
****************************************************************************/
/* Style the tab using the tab sub-control. Note that it reads QTabBar _not_ QTabWidget
       styling options here unfortunately are very limited;
       background / background-color are not effective in ::tab, except for :selected,
       (but there we would prefer the bright "default anyway)
       only color (and margin/padding) actually seems to be working
*/
	QTabBar::tab
	{
	/* only needed for theme switch; default black color and white background would be fine, but they aren't set automatically at switching theme. there, setting color here sets border/text color of (only) _current_, i.e. :selected tab (:selected not working on that occasion - no idea why) */
		color: rgba(25, 25, 25, 255);
		padding: 2px 12px 2px 12px;
		/* only effective for QTabWidget (not applied to tabbed QDockWidgets):  */
		border-top-left-radius: 5px;
		border-top-right-radius: 5px;
	}
	/* QTabBar::tab:selected - not required / working in all scenarios, but required for QTabWidget; for theme switch, see above */
	QTabBar::tab:selected
	{
		background: qlineargradient(spread:pad,
			x1:0, y1:0,
			x2:0, y2:1,
			stop:0 rgba(235, 235, 235, 255),
			stop:1 rgba(255, 255, 255, 255)
		);
	}
	QTabBar::tab:!selected
	{
		/* QTabBar::tab:selected - not required / working for theme switch, see above */
		margin-top: 3px;
		color: rgb(135, 135, 135);
		/* only effective for QTabWidget (not applied to tabbed QDockWidgets):  */
		background: qlineargradient(spread:pad,
			x1:0, y1:0,
			x2:0, y2:1,
			stop:0 rgba(215, 215, 215, 255),
			stop:1 rgba(235, 235, 235, 235)
		);
	}
	QTabBar::scroller
	{   /* the width of the scroll buttons */
		width: 24px;
	}
	QTabBar QToolButton
	{	/* the scroll buttons are tool buttons */
		color: rgb(0, 0, 0);
	}
/****************************************************************************
QLabel
****************************************************************************/
	QLabel
	{
		padding: 0 3px;
		color: rgba(25, 25, 25, 255);
		background: none;
		font: normal;
	}
/****************************************************************************
QLineEdit
****************************************************************************/
	QLineEdit
	{
		color: rgba(25, 25, 25, 255);
	}
/****************************************************************************
QSpinBox
QDoubleSpinBox
****************************************************************************/
	QSpinBox,
	QDoubleSpinBox
	{
		color: rgba(25, 25, 25, 255);
	}
	QSpinBox::up-button,
	QDoubleSpinBox::up-button
	{
		border-width: 0px;
	}
	QSpinBox::down-button,
	QDoubleSpinBox::down-button
	{
		border-width: 0px;
	}
	QDoubleSpinBox::up-arrow,
	QScrollBar::up-arrow,
	QSpinBox::up-arrow
	{
		image: url(:/images/arrow_up.svg);
	}
	QComboBox::down-arrow,
	QDoubleSpinBox::down-arrow,
	QScrollBar::down-arrow,
	QSpinBox::down-arrow
	{
		image: url(:/images/arrow_down.svg);
	}
	QSpinBox::up-button:hover,
	QDoubleSpinBox::up-button:hover,
	QSpinBox::down-button:hover,
	QDoubleSpinBox::down-button:hover
	{
		background: qlineargradient(spread:pad,
			x1:0, y1:0,
			x2:0, y2:1,
			stop:0 rgba(195, 195, 195, 255),
			stop:0.617 rgba(170, 170, 170, 255),
			stop:1 rgba(155, 155, 155, 255)
		);
	}
	QSpinBox::up-button:pressed,
	QDoubleSpinBox::up-button:pressed,
	QSpinBox::down-button:pressed,
	QDoubleSpinBox::down-button:pressed
	{
		background: qlineargradient(spread:pad,
			x1:0, y1:0,
			x2:0, y2:1,
			stop:0 rgba(155, 155, 155, 255),
			stop:0.381 rgba(170, 170, 170, 255),
			stop:1 rgba(195, 195, 195, 255)
		);
	}
/****************************************************************************
QProgressBar
****************************************************************************/
	QProgressBar
	{
		text-align: center;
		vertical-align: center;
		color: rgba(25, 25, 25, 255);
		border-bottom-right-radius: 0px;
		border-top-right-radius:  0px;
		border-bottom-left-radius:  0px;
		border-top-left-radius:  0px;
		text-align: center;
	}
	QProgressBar::chunk
	{
		background: qlineargradient(spread:pad,
			x1:0, y1:0,
			x2:0, y2:1,
			stop:0 rgba(150, 186, 230, 255),
			stop:0.617 rgba(100, 146, 212, 255),
			stop:1 rgba(70, 122, 201, 255)
		);
		color: rgba(25, 25, 25, 255);
		/*border-radius: 9px;*/
		border-bottom-right-radius: 0px;
		border-top-right-radius: 0px;
		border-bottom-left-radius: 0px;
		border-top-left-radius: 0px;
	}
/****************************************************************************
QListView,
QListWidget,
QTableView,
QTableWidget,
QTreeView,
QTreeWidget
****************************************************************************/
	QListView,
	QListWidget,
	QTableView,
	QTableWidget,
	QTextEdit
	{
		background-color: rgba(255, 255, 255, 255);
		color: rgba(25, 25, 25, 255);
	}
	QListView::item,
	QListWidget::item
	{
		background-color: rgba(235, 235, 235, 255);
		color: rgba(25, 25, 25, 255);
	}
	QListView::item:selected,
	QListWidget::item:selected
	{
		background-color: rgba(180, 180, 180, 255);
		color: rgba(25, 25, 25, 255);
		border-top: 1px solid 		rgba(215, 215, 215, 255);
		border-bottom: 1px solid 	rgba(135, 135, 135, 255);
		border-left: 1px solid 		rgba(205, 205, 205, 255);
		border-right: 1px solid		rgba(205, 205, 205, 255);
	}
	QTreeView,
	QTreeWidget
	{
		selection-background-color: transparent;
	}
	QTreeView::item:selected,
	QTreeWidget::item:selected
	{
		background-color: rgba(180, 180, 180, 255);
		color: rgba(25, 25, 25, 255);
	}
	QListView::item:alternate,
	QTableWidget::item:alternate,
	QListWidget::item:alternate
	{
		background-color: rgba(245, 245, 245, 255);
		color: rgba(25, 25, 25, 255);
	}
	QListView::item:hover,
	QListWidget::item:hover
	{
		color: rgba(0, 0, 0, 255);
		/*border: 1px solid rgba(135, 135, 135, 255);*/
	}
	QListView::item:alternate:hover,
	QListWidget::item:alternate:hover
	{
		color: rgba(0, 0, 0, 255);
		/*border: 1px solid rgba(135, 135, 135, 255);*/
	}
	QTableView::item:selected,
	QTableWidget::item:selected
	{
		background-color: rgba(180, 180, 180, 255);
		color: rgba(25, 25, 25, 255);
	}
/****************************************************************************
QRadioButton
QCheckBox
****************************************************************************/
	QRadioButton,
	QCheckBox
	{
		color: rgba(25, 25, 25, 255);
	}
	QCheckBox::indicator:checked
	{
		image: url(:/images/checkbox_checked.svg);
	}
	QCheckBox::indicator:checked:hover
	{
		image: url(:/images/checkbox_checked_hover.svg);
	}
	QCheckBox::indicator:checked:pressed
	{
		image: url(:/images/checkbox_checked_pressed.svg);
	}

	QCheckBox::indicator:unchecked
	{
		image: url(:/images/checkbox_unchecked.svg);
	}
	QCheckBox::indicator:unchecked:hover
	{
		image: url(:/images/checkbox_unchecked_hover.svg);
	}
	QCheckBox::indicator:unchecked:pressed
	{
		image: url(:/images/checkbox_unchecked_pressed.svg);
	}

	QCheckBox::indicator:indeterminate
	{
		image: url(:/images/checkbox_indeterminate.svg);
	}
	QCheckBox::indicator:indeterminate:hover
	{
		image: url(:/images/checkbox_indeterminate_hover.svg);
	}
	QCheckBox::indicator:indeterminate:pressed
	{
		image: url(:/images/checkbox_indeterminate_pressed.svg);
	}

	QRadioButton::indicator::unchecked
	{
		image: url(:/images/radiobutton_unchecked.svg);
	}
	QRadioButton::indicator:unchecked:hover
	{
		image: url(:/images/radiobutton_unchecked_hover.svg);
	}
	QRadioButton::indicator:unchecked:pressed
	{
		image: url(:/images/radiobutton_unchecked_pressed.svg);
	}

	QRadioButton::indicator::checked
	{
		image: url(:/images/radiobutton_checked.svg);
	}
	QRadioButton::indicator:checked:hover
	{
		image: url(:/images/radiobutton_checked_hover.svg);
	}
	QRadioButton::indicator:checked:pressed
	{
		image: url(:/images/radiobutton_checked_pressed.svg);
	}
/****************************************************************************
QSlider
****************************************************************************/
	QSlider
	{
		background: none;
	}
	QSlider::groove:horizontal
	{
		height: 5px; /* the groove expands to the size of the slider by default. by giving it a height, it has a fixed size */
		background: qlineargradient(spread:pad,
			x1:0, y1:0,
			x2:0, y2:1,
			stop:0 rgba(195, 195, 195, 255),
			stop:0.381 rgba(206, 206, 206, 255),
			stop:1 rgba(225, 225, 225, 255)
		);
		margin: 3px 0;
		border-radius: 3px;
	}
	QSlider::handle:horizontal
	{
		background: qconicalgradient(cx:0.5, cy:0.5, angle:0,
			stop:0 			rgba(180, 180, 180, 255),
			stop:0.176136 rgba(120, 120, 120, 255),
			stop:0.5		rgba(180, 180, 180, 255),
			stop:0.664773 rgba(120, 120, 120, 255),
			stop:1			rgba(180, 180, 180, 255)
		);
		border: 0px solid rgb(142,142,142);
		width: 13px;
		margin: -4px 0; /* handle is placed by default on the contents rect of the groove. Expand outside the groove */
		border-radius: 6px;
	}
	QSlider::groove:vertical
	{
		border: 1px solid rgba(105, 105, 105, 255);
		width: 6px; /* the groove expands to the size of the slider by default. by giving it a height, it has a fixed size */
		background: qlineargradient(spread:pad,
			x1:0, y1:0,
			x2:1, y2:0,
			stop:0 rgba(195, 195, 195, 255),
			stop:0.381 rgba(206, 206, 206, 255),
			stop:1 rgba(225, 225, 225, 255)
		);
		margin: 0 3px;
		border-radius: 3px;
	}
	QSlider::handle:vertical
	{
		background: qconicalgradient(cx:0.5, cy:0.5, angle:0,
			stop:0 			rgba(180, 180, 180, 255),
			stop:0.176136	rgba(120, 120, 120, 255),
			stop:0.5		rgba(180, 180, 180, 255),
			stop:0.664773	rgba(120, 120, 120, 255),
			stop:1			rgba(180, 180, 180, 255)
		);
		border: 1px solid rgb(142,142,142);
		height: 12px;
		margin: 0 -4px; /* handle is placed by default on the contents rect of the groove. Expand outside the groove */
		border-radius: 6px;
	}
/****************************************************************************
QComboBox
****************************************************************************/
	QComboBox
	{
		padding-right: 20px; /* make room for the arrows */
		color: rgba(25, 25, 25, 255);
	}
	QComboBox::drop-down
	{
		border: none;
	}
	QComboBox:on
	{
		background: qlineargradient(spread:pad,
			x1:0, y1:0,
			x2:0, y2:1,
			stop:0 rgba(229, 229, 229, 255),
			stop:0.617 rgba(210, 210, 210, 255),
			stop:1 rgba(199, 199, 199, 255)
		);
	}
	/* for linux: */
	QComboBox::item
	{
		background-color: rgba(255, 255, 255, 255);
	}
	QComboBox::item:selected
	{
		background-color: rgb(90, 90, 90);
		color: rgb(255, 168, 0);
	}
	/* for windows: */
	QComboBox QAbstractItemView
	{
		selection-background-color: rgb(90, 90, 90);
		selection-color: rgb(255, 168, 0);
	}
/****************************************************************************
QStatusBar
****************************************************************************/
	QStatusBar
	{
		color: rgba(0, 88, 226, 255);
		font: normal;
	}
	QStatusBar::item
	{
		spacing: 3px; /* spacing between menu bar items */
		padding: 6px 12px;
		border: 0;
		background: transparent;
		color: rgba(0, 88, 226, 255);
	}
/****************************************************************************
QScrollBar
****************************************************************************/
	QScrollBar:horizontal
	{
		border: 0;
		background-color: rgba(215, 215, 215, 255);
		height: 15px;
		margin: 0 18px 0 18px;
	}
	QScrollBar::handle:horizontal
	{
		background: qlineargradient(spread:pad,
			x1:0, y1:0,
			x2:0, y2:1,
			stop:0 rgba(150, 186, 230, 255),
			stop:0.617 rgba(100, 146, 212, 255),
			stop:1 rgba(70, 122, 201, 255)
		);
		min-width:20px;
	}
	QScrollBar::add-line:horizontal
	{
		border: 0;
		background-color: rgba(215, 215, 215, 255);
		width: 15px;
		subcontrol-position: right;
		subcontrol-origin: margin;
	}
	QScrollBar::sub-line:horizontal
	{
		border: 0;
		background-color: rgba(215, 215, 215, 255);
		width: 15px;
		subcontrol-position: left;
		subcontrol-origin: margin;
	}
	QScrollBar::sub-line:horizontal:hover, QScrollBar::add-line:horizontal::hover,
	QScrollBar::sub-line:vertical:hover, QScrollBar::add-line:vertical:hover
	{
		background: qlineargradient(spread:pad,
			x1:0, y1:0,
			x2:0, y2:1,
			stop:0 rgba(150, 186, 230, 255),
			stop:0.617 rgba(100, 146, 212, 255),
			stop:1 rgba(70, 122, 201, 255)
		);
	}
	QScrollBar::sub-line:horizontal::pressed, QScrollBar::add-line:horizontal::pressed,
	QScrollBar::sub-line:vertical:pressed, QScrollBar::add-line:vertical:pressed
	{
		background: qlineargradient(spread:pad,
			x1:0, y1:0,
			x2:0, y2:1,
			stop:0 rgba(70, 122, 201, 255),
			stop:0.381 rgba(100, 146, 212, 255),
			stop:1 rgba(150, 186, 230, 255)
		);
	}
	QScrollBar::left-arrow
	{
		image: url(:/images/arrow_left.svg);
	}
	QScrollBar::right-arrow
	{
		image: url(:/images/arrow_right.svg);
	}
	QScrollBar::add-page:vertical, QScrollBar::sub-page:vertical,
	QScrollBar::add-page:horizontal, QScrollBar::sub-page:horizontal
	{
		background: none;
	}
	QScrollBar:vertical
	{
		border: 0;
		background-color: rgba(215, 215, 215, 255);
		width: 15px;
		margin: 18px 0 18px 0;
	}
	QScrollBar::handle:vertical
	{
		background: qlineargradient(spread:pad,
			x1:0, y1:0,
			x2:1, y2:0,
			stop:0 rgba(150, 186, 230, 255),
			stop:0.617 rgba(100, 146, 212, 255),
			stop:1 rgba(70, 122, 201, 255)
		);
		min-height: 20px;
	}
	QScrollBar::add-line:vertical
	{
		border: 0;
		background-color: rgba(215, 215, 215, 255);
		height: 15px;
		subcontrol-position: bottom;
		subcontrol-origin: margin;
	}
	QScrollBar::sub-line:vertical
	{
		border: 0;
		background-color: rgba(215, 215, 215, 255);
		height: 15px;
		subcontrol-position: top;
		subcontrol-origin: margin;
	}
/****************************************************************************
QDockWidget
****************************************************************************/
	QMainWindow::separator
	{
		width: 3px;
	}
	QDockWidget
	{
		background-color: rgba(215, 215, 215, 255);
		color: rgba(25, 25, 25, 255);
		font: bold;
		titlebar-close-icon: url(:/images/dockwidget-close.svg);
		titlebar-normal-icon: url(:/images/dockwidget-float.svg);
	}
	QDockWidget::title
	{
		background-color: rgba(215, 215, 215, 255);
		vertical-align: center;
		text-align: left;
	}
	QDockWidget::close-button, QDockWidget::float-button
	{	/* keeps title bar "slim", there otherwise seems to be some default padding applied. */
		padding: 0;
		/*icon-size: 20px;*/
		border: 1px solid rgba(0, 0, 0, 0);
	}
	QDockWidget::close-button:pressed, QDockWidget::float-button:pressed
	{
		border: 1px inset rgba(185, 185, 185, 255);
	}
	QDockWidget::close-button:hover, QDockWidget::float-button:hover
	{
		background-color: rgba(150,186,230, 128);
	}
/****************************************************************************
QSplitter
****************************************************************************/
	QSplitter
	{
	}
	QSplitter::handle
	{
		border-radius: 0px;
		width: 0px;
		height: 0px;
		margin: 2px;
	}
/****************************************************************************
Disabled Inputs
****************************************************************************/
	QLabel:disabled,
	QCheckBox:disabled,
	QLineEdit:disabled,
	QComboBox:disabled,
	QSpinBox:disabled,
	QDoubleSpinBox:disabled,
	QPushButton:disabled,
	QMenu::item:disabled,
	QMenuBar::item:disabled
	{
		color: rgba(115, 115, 115, 255);
	}
	QLineEdit:disabled,
	QComboBox:disabled,
	QSpinBox:disabled,
	QDoubleSpinBox:disabled
	{
		border: 1px solid rgba(205, 205, 205, 255);
		background-color: rgba(235, 235, 235, 255);
	}
	QToolButton:disabled
	{
		background-color: rgba(235, 235, 235, 255);
	}
/****************************************************************************
Specific / Custom Widgets
****************************************************************************/

	QWidget[qssClass="jobWidget"]
	{
		background-color: rgba(235, 235, 235, 255);
		min-height:  80px;
		border-radius: 4px;
	}
	QWidget[qssClass="jobWidget"] *
	{
		padding: 0px;
	}
	QWidget[qssClass="jobWidget"] .QWidget,
	QWidget[qssClass="jobWidget"] QLabel,
	QWidget[qssClass="jobWidget"] QScrollArea,
	QWidget[qssClass="jobWidget"] QToolButton:!hover
	{
		background-color: transparent;
	}
	QWidget[qssClass="jobWidget"] QLabel[qssClass="titleLabel"]
	{
		font-weight: bold;
	}
