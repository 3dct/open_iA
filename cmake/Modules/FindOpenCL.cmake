# - Try to find OpenCL
# This module tries to find an OpenCL implementation on your system. It supports
# AMD / ATI, Apple and NVIDIA implementations, but should work, too.
#
# Once done this will define
#  OPENCL_FOUND         - system has OpenCL
#  OPENCL_INCLUDE_DIRS  - the OpenCL include directory
#  OPENCL_LIBRARIES     - link these to use OpenCL

FIND_PACKAGE( PackageHandleStandardArgs )

# Platforms
SET(OPENCL_USE_PLATFORM_INTEL FALSE CACHE BOOL  "Use Intel implementation of the OpenCL.")
SET(OPENCL_USE_PLATFORM_NVIDIA FALSE CACHE BOOL "Use NVidia implementation of the OpenCL.")
SET(OPENCL_USE_PLATFORM_AMD FALSE CACHE BOOL    "Use AMD implementation of the OpenCL.")

# Define profiling variable for ITK4OpenCL
SET(OPENCL_PROFILING OFF CACHE BOOL "Enable OpenCL profiling with CL_QUEUE_PROFILING_ENABLE. Event objects can be used to capture profiling information that measure execution time of a command.")

# OpenCL Math Intrinsics Options
IF(OPENCL_USE_PLATFORM_INTEL OR OPENCL_USE_PLATFORM_NVIDIA OR OPENCL_USE_PLATFORM_AMD)
  SET(OPENCL_MATH_SINGLE_PRECISION_CONSTANT CACHE BOOL "Treat double precision floating-point constant as single precision constant.")
  SET(OPENCL_MATH_DENORMS_ARE_ZERO CACHE BOOL "This option controls how single precision and double precision denormalized numbers are handled.")
ENDIF()

# OpenCL Optimization Options
IF(OPENCL_USE_PLATFORM_INTEL OR OPENCL_USE_PLATFORM_NVIDIA OR OPENCL_USE_PLATFORM_AMD)
  SET(OPENCL_OPTIMIZATION_OPT_DISABLE CACHE BOOL "This option disables all optimizations. The default is optimizations are enabled.")
  SET(OPENCL_OPTIMIZATION_STRICT_ALIASING CACHE BOOL "This option allows the compiler to assume the strictest aliasing rules.")
  SET(OPENCL_OPTIMIZATION_MAD_ENABLE CACHE BOOL "Allow a * b + c to be replaced by a mad. The mad computes a * b + c with reduced accuracy.")
  SET(OPENCL_OPTIMIZATION_NO_SIGNED_ZEROS CACHE BOOL "Allow optimizations for floating-point arithmetic that ignore the signedness of zero.")
  SET(OPENCL_OPTIMIZATION_UNSAFE_MATH_OPTIMIZATIONS CACHE BOOL "Allow optimizations for floating-point arithmetic.")
  SET(OPENCL_OPTIMIZATION_FINITE_MATH_ONLY CACHE BOOL "Allow optimizations for floating-point arithmetic that assume that arguments and results are not NaNs or +-infinity.")
  SET(OPENCL_OPTIMIZATION_FAST_RELAXED_MATH CACHE BOOL "Sets the optimization options -cl-finite-math-only and -cl-unsafe-math-optimizations.")
ENDIF()

IF (APPLE)
ENDIF (APPLE)

# If cl.h is not in the OPENCL_INCLUDE_DIRS then set
# OPENCL_INCLUDE_DIRS to NOTFOUND
IF(NOT EXISTS ${OPENCL_INCLUDE_DIRS}/CL/cl.h)
  SET(OPENCL_INCLUDE_DIRS OPENCL_INCLUDE_DIRS-NOTFOUND CACHE PATH "OpenCL path to CL/cl.h include directory" FORCE)
ENDIF()

IF(UNIX)
  # If OpenCL is not in the OPENCL_LIBRARIES then set
  # OPENCL_LIBRARIES to NOTFOUND
  #SET(OPENCL_LIBRARIES "")
  #MESSAGE(STATUS "OPENCL_LIBRARIES: " ${OPENCL_LIBRARIES})
  STRING(FIND ${OPENCL_LIBRARIES} "OpenCL" OPENCL_LIBRARIES_EXIST)
  IF(OPENCL_LIBRARIES_EXIST EQUAL -1)
    SET(OPENCL_LIBRARIES OPENCL_LIBRARIES-NOTFOUND CACHE PATH "OpenCL path to OpenCL library" FORCE)
  ENDIF()
ENDIF(UNIX)

IF(WIN32)
  # If OpenCL.lib is not in the OPENCL_LIBRARIES then set
  # OPENCL_LIBRARIES to NOTFOUND
  STRING(FIND "${OPENCL_LIBRARIES}" "OpenCL.lib" OPENCL_LIBRARIES_EXIST)
  IF(OPENCL_LIBRARIES_EXIST EQUAL -1)
    SET(OPENCL_LIBRARIES OPENCL_LIBRARIES-NOTFOUND CACHE PATH "OpenCL path to OpenCL.lib library" FORCE)
  ENDIF()
ENDIF(WIN32)

# Apple, NOT TESTED
IF (APPLE)
  FIND_LIBRARY(OPENCL_LIBRARIES OpenCL DOC "OpenCL lib for OSX")
  FIND_PATH(OPENCL_INCLUDE_DIRS OpenCL/cl.h DOC "Include for OpenCL on OSX")
  FIND_PATH(_OPENCL_CPP_INCLUDE_DIRS OpenCL/cl.hpp DOC "Include for OpenCL CPP bindings on OSX")
  # Unix style platforms
  FIND_LIBRARY(OPENCL_LIBRARIES OpenCL ENV LD_LIBRARY_PATH)

  GET_FILENAME_COMPONENT(OPENCL_LIB_DIR ${OPENCL_LIBRARIES} PATH)
  GET_FILENAME_COMPONENT(_OPENCL_INC_CAND ${OPENCL_LIB_DIR}/../../include ABSOLUTE)

  # The AMD SDK currently does not place its headers
  # in /usr/include, therefore also search relative
  # to the library
  FIND_PATH(OPENCL_INCLUDE_DIRS CL/cl.h PATHS ${_OPENCL_INC_CAND} /usr/local/cuda/include/)
  FIND_PATH(_OPENCL_CPP_INCLUDE_DIRS CL/cl.hpp PATHS ${_OPENCL_INC_CAND})
ENDIF (APPLE)

# Windows
IF (WIN32 OR UNIX)
  # If none of the platform is set
  IF(NOT OPENCL_USE_PLATFORM_INTEL AND NOT OPENCL_USE_PLATFORM_NVIDIA AND NOT OPENCL_USE_PLATFORM_AMD)
    SET(OPENCL_INCLUDE_DIRS OPENCL_INCLUDE_DIRS-NOTFOUND CACHE PATH "OpenCL path to CL/cl.h include directory" FORCE)
    SET(OPENCL_LIBRARIES OPENCL_LIBRARIES-NOTFOUND CACHE PATH "OpenCL path to OpenCL.lib library" FORCE)

    # Unset an extra AMD/Intel option
    UNSET(OPENCL_USE_PLATFORM_AMD_GPU_CPU CACHE)
		UNSET(OPENCL_USE_PLATFORM_INTEL_GPU_CPU CACHE)

    # Unset optimizations
    UNSET(OPENCL_OPTIMIZATION_OPT_DISABLE CACHE)
    UNSET(OPENCL_OPTIMIZATION_STRICT_ALIASING CACHE)
    UNSET(OPENCL_OPTIMIZATION_MAD_ENABLE CACHE)
    UNSET(OPENCL_OPTIMIZATION_NO_SIGNED_ZEROS CACHE)
    UNSET(OPENCL_OPTIMIZATION_UNSAFE_MATH_OPTIMIZATIONS CACHE)
    UNSET(OPENCL_OPTIMIZATION_FINITE_MATH_ONLY CACHE)
    UNSET(OPENCL_OPTIMIZATION_FAST_RELAXED_MATH CACHE)

    SET(OPENCL_PLATFORM_STRING "OpenCL not found" CACHE INTERNAL "OpenCL Platform")

    MESSAGE( WARNING "Please select OpenCL platform" )
  ENDIF()

  # Intel OpenCL
  IF(OPENCL_USE_PLATFORM_INTEL)
		SET(OPENCL_USE_PLATFORM_INTEL_GPU_CPU TRUE CACHE BOOL "Use Intel GPU or CPU implementation of the OpenCL. On use GPU, Off use CPU")

    # Unset other platforms
    UNSET(OPENCL_USE_PLATFORM_NVIDIA CACHE)
    UNSET(OPENCL_USE_PLATFORM_AMD CACHE)

    # Find Intel OpenCL SDK
    IF(${OPENCL_INCLUDE_DIRS} STREQUAL "OPENCL_INCLUDE_DIRS-NOTFOUND")
      FIND_PATH(OPENCL_INCLUDE_DIRS CL/cl.h
      HINTS
          $ENV{INTELOCLSDKROOT}
      PATH_SUFFIXES
      include
      PATHS
          /usr/local/intel
      )
    ENDIF()

    IF(${OPENCL_LIBRARIES} STREQUAL "OPENCL_LIBRARIES-NOTFOUND")
      IF(CMAKE_SIZEOF_VOID_P EQUAL 8)
        FIND_LIBRARY(OPENCL_LIBRARIES lib/x64/OpenCL.lib $ENV{INTELOCLSDKROOT})
      ELSE()
        FIND_LIBRARY(OPENCL_LIBRARIES lib/x86/OpenCL.lib $ENV{INTELOCLSDKROOT})
      ENDIF()
    ENDIF()

    IF({$OPENCL_USE_PLATFORM_INTEL_GPU_CPU})
      SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DITK_USE_INTEL_GPU_OPENCL")
    ELSE()
      SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DITK_USE_INTEL_CPU_OPENCL")
    ENDIF()


    SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DITK_USE_INTEL_OPENCL")
    SET(OPENCL_PLATFORM_STRING "Intel OpenCL" CACHE INTERNAL "OpenCL Platform")

  ENDIF(OPENCL_USE_PLATFORM_INTEL) # OPENCL_USE_PLATFORM_INTEL

  # NVidia OpenCL
  IF(OPENCL_USE_PLATFORM_NVIDIA)

    # Unset other platforms
    UNSET(OPENCL_USE_PLATFORM_INTEL CACHE)
    UNSET(OPENCL_USE_PLATFORM_AMD CACHE)

    # Find NVidia OpenCL SDK
    IF(${OPENCL_INCLUDE_DIRS} STREQUAL "OPENCL_INCLUDE_DIRS-NOTFOUND")
      FIND_PATH(OPENCL_INCLUDE_DIRS CL/cl.h
      HINTS
          $ENV{CUDA_PATH_V5_0}
		  $ENV{CUDA_PATH_V4_2}
		  $ENV{CUDA_PATH_V4_0}
          $ENV{CUDA_PATH_V3_2}
      PATH_SUFFIXES
      include
      PATHS
          /usr/local/cuda
      )
    ENDIF()

    IF(${OPENCL_LIBRARIES} STREQUAL "OPENCL_LIBRARIES-NOTFOUND")
      IF(CMAKE_SIZEOF_VOID_P EQUAL 8)
        FIND_LIBRARY(OPENCL_LIBRARIES
        NAMES OpenCL
        HINTS
			$ENV{CUDA_PATH_V5_0}
			$ENV{CUDA_PATH_V4_2}
            $ENV{CUDA_PATH_V4_0}
            $ENV{CUDA_PATH_V3_2}
        PATH_SUFFIXES lib/x64
        PATHS
            /usr/local/cuda
        )
      ELSE(CMAKE_SIZEOF_VOID_P EQUAL 8)
        FIND_LIBRARY(OPENCL_LIBRARIES
        NAMES OpenCL
        HINTS
			$ENV{CUDA_PATH_V5_0}
			$ENV{CUDA_PATH_V4_2}
            $ENV{CUDA_PATH_V4_0}
            $ENV{CUDA_PATH_V3_2}
        PATH_SUFFIXES lib/Win32
        PATHS
            /usr/local/cuda
        )
      ENDIF(CMAKE_SIZEOF_VOID_P EQUAL 8)
    ENDIF()

    SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DITK_USE_NVIDIA_OPENCL")
    SET(OPENCL_PLATFORM_STRING "NVidia OpenCL" CACHE INTERNAL "OpenCL Platform")

  ENDIF(OPENCL_USE_PLATFORM_NVIDIA) # OPENCL_USE_PLATFORM_NVIDIA

  # AMD OpenCL
  IF(OPENCL_USE_PLATFORM_AMD)
    SET(OPENCL_USE_PLATFORM_AMD_GPU_CPU TRUE CACHE BOOL "Use AMD GPU or CPU implementation of the OpenCL. On use GPU, Off use CPU")

    # Unset other platforms
    UNSET(OPENCL_USE_PLATFORM_INTEL CACHE)
    UNSET(OPENCL_USE_PLATFORM_NVIDIA CACHE)

    # Find AMD OpenCL SDK
    IF(${OPENCL_INCLUDE_DIRS} STREQUAL "OPENCL_INCLUDE_DIRS-NOTFOUND")
      FIND_PATH(OPENCL_INCLUDE_DIRS CL/cl.h
      HINTS
      $ENV{AMDAPPSDKROOT}
      PATH_SUFFIXES
      include
      PATHS
          /usr/local
      )
    ENDIF()

    IF(${OPENCL_LIBRARIES} STREQUAL "OPENCL_LIBRARIES-NOTFOUND")
      IF(CMAKE_SIZEOF_VOID_P EQUAL 8)
        FIND_LIBRARY(OPENCL_LIBRARIES
        NAMES OpenCL
        HINTS
            $ENV{AMDAPPSDKROOT}
        PATH_SUFFIXES lib/x86_64
        PATHS
            /usr/local
        )
      ELSE(CMAKE_SIZEOF_VOID_P EQUAL 8)
        FIND_LIBRARY(OPENCL_LIBRARIES
        NAMES OpenCL
        HINTS
            $ENV{AMDAPPSDKROOT}
        PATH_SUFFIXES lib/x86
        PATHS
            /usr/local
        )
      ENDIF(CMAKE_SIZEOF_VOID_P EQUAL 8)
    ENDIF()

    SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DITK_USE_AMD_OPENCL -DATI_OS_WIN")

    IF({$OPENCL_USE_PLATFORM_AMD_GPU_CPU})
      SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DITK_USE_AMD_GPU_OPENCL")
    ELSE()
      SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DITK_USE_AMD_CPU_OPENCL")
    ENDIF()

    SET(OPENCL_PLATFORM_STRING "AMD OpenCL" CACHE INTERNAL "OpenCL Platform")

  ENDIF(OPENCL_USE_PLATFORM_AMD) # OPENCL_USE_PLATFORM_AMD

ENDIF(WIN32 OR UNIX)

# Add OpenCL Math Intrinsics Options
IF(OPENCL_USE_PLATFORM_AMD)
  # Set OPENCL_MATH_SINGLE_PRECISION_CONSTANT obligingly for AMD
  SET(OPENCL_MATH_SINGLE_PRECISION_CONSTANT ON CACHE BOOL "Treat double precision floating-point constant as single precision constant." FORCE)
  SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DOPENCL_MATH_SINGLE_PRECISION_CONSTANT")
ELSE()
  IF(OPENCL_MATH_SINGLE_PRECISION_CONSTANT)
    SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DOPENCL_MATH_SINGLE_PRECISION_CONSTANT")
  ENDIF()
ENDIF()

IF(OPENCL_MATH_DENORMS_ARE_ZERO)
  SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DOPENCL_MATH_DENORMS_ARE_ZERO")
ENDIF()

# Add OpenCL Optimization
IF(OPENCL_OPTIMIZATION_OPT_DISABLE)
  SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DOPENCL_OPTIMIZATION_OPT_DISABLE")
  UNSET(OPENCL_OPTIMIZATION_STRICT_ALIASING CACHE)
  UNSET(OPENCL_OPTIMIZATION_MAD_ENABLE CACHE)
  UNSET(OPENCL_OPTIMIZATION_NO_SIGNED_ZEROS CACHE)
  UNSET(OPENCL_OPTIMIZATION_UNSAFE_MATH_OPTIMIZATIONS CACHE)
  UNSET(OPENCL_OPTIMIZATION_FINITE_MATH_ONLY CACHE)
  UNSET(OPENCL_OPTIMIZATION_FAST_RELAXED_MATH CACHE)
ENDIF()

IF(NOT OPENCL_OPTIMIZATION_OPT_DISABLE)
  IF(OPENCL_OPTIMIZATION_STRICT_ALIASING)
    SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DOPENCL_OPTIMIZATION_STRICT_ALIASING")
  ENDIF()

  IF(OPENCL_OPTIMIZATION_MAD_ENABLE)
    SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DOPENCL_OPTIMIZATION_MAD_ENABLE")
  ENDIF()

  IF(OPENCL_OPTIMIZATION_NO_SIGNED_ZEROS)
    SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DOPENCL_OPTIMIZATION_NO_SIGNED_ZEROS")
  ENDIF()

  IF(OPENCL_OPTIMIZATION_FAST_RELAXED_MATH)
    SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DOPENCL_OPTIMIZATION_FAST_RELAXED_MATH")
    UNSET(OPENCL_OPTIMIZATION_UNSAFE_MATH_OPTIMIZATIONS CACHE)
    UNSET(OPENCL_OPTIMIZATION_FINITE_MATH_ONLY CACHE)
  ENDIF()

  IF(NOT OPENCL_OPTIMIZATION_FAST_RELAXED_MATH)
    IF(OPENCL_OPTIMIZATION_UNSAFE_MATH_OPTIMIZATIONS)
      SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DOPENCL_OPTIMIZATION_UNSAFE_MATH_OPTIMIZATIONS")
    ENDIF()

    IF(OPENCL_OPTIMIZATION_FINITE_MATH_ONLY)
      SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DOPENCL_OPTIMIZATION_FINITE_MATH_ONLY")
    ENDIF()
  ENDIF()
ENDIF()

# Add OpenCL Profiling
IF(OPENCL_PROFILING)
	SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DOPENCL_PROFILING")
ENDIF()

# handle the QUIETLY and REQUIRED arguments and set OpenCL_FOUND to TRUE if
# all listed variables are TRUE
FIND_PACKAGE_HANDLE_STANDARD_ARGS(OpenCL DEFAULT_MSG OPENCL_LIBRARIES OPENCL_INCLUDE_DIRS)

MARK_AS_ADVANCED(OPENCL_INCLUDE_DIRS)
MARK_AS_ADVANCED(OPENCL_LIBRARIES)
