FILE( GLOB_RECURSE open_iA_core_SRCS "*.cpp" "*.h" )
FILE( GLOB_RECURSE open_iA_core_UI "*.ui" )

QT5_WRAP_UI( open_iA_core_SRCS ${open_iA_core_UI})

SET (LIB_TYPE SHARED)

# Generate core dll file / shared object:
add_library(${CORE_LIBRARY_NAME} ${LIB_TYPE} ${open_iA_core_SRCS})
# TODO: only include those modules actually needed by core?
IF (VTK_MAJOR_VERSION GREATER 8)
	vtk_module_autoinit(
	  TARGETS ${CORE_LIBRARY_NAME}
	  MODULES ${VTK_LIBRARIES})
ENDIF()
IF ("${VTK_VIDEO_SUPPORT}" STREQUAL "ogg")
	TARGET_COMPILE_DEFINITIONS(${CORE_LIBRARY_NAME} PRIVATE VTK_USE_OGGTHEORA_ENCODER)
ENDIF()
# TODO: only link against libraries actually needed by core?
TARGET_LINK_LIBRARIES(${CORE_LIBRARY_NAME} PUBLIC base)
IF (HDF5_FOUND)
	# as HDF5 is required only in core, we could link privately, but under Linux this leads
	# to gui and cmd also requiring linking to it separately, it's easier to link PUBLIC here:
	TARGET_LINK_LIBRARIES(${CORE_LIBRARY_NAME} PUBLIC ${HDF5_LIBRARY})
	# make sure HDF5 is included before itk (which brings its own hdf5 libraries in a different version):
	TARGET_INCLUDE_DIRECTORIES(${CORE_LIBRARY_NAME} BEFORE PRIVATE ${HDF5_INCLUDE_DIR})
	TARGET_COMPILE_DEFINITIONS(${CORE_LIBRARY_NAME} PRIVATE USE_HDF5)
ENDIF()
IF (SCIFIO_LOADED)
	TARGET_COMPILE_DEFINITIONS(${CORE_LIBRARY_NAME} PRIVATE USE_SCIFIO)
ENDIF()
IF (WIN32)
	# apparently required for VS 2015, and doesn't hurt for VS2013:
	TARGET_LINK_LIBRARIES(${CORE_LIBRARY_NAME} PUBLIC Opengl32)
ENDIF (WIN32)
IF(OpenMP_CXX_FOUND)
	TARGET_LINK_LIBRARIES(${CORE_LIBRARY_NAME} PUBLIC OpenMP::OpenMP_CXX)
	IF (MSVC)
		TARGET_COMPILE_OPTIONS(${CORE_LIBRARY_NAME} PUBLIC /Zc:twoPhase-)
	ENDIF()
ENDIF()
if (openiA_CHART_OPENGL)
	TARGET_COMPILE_DEFINITIONS(${CORE_LIBRARY_NAME} PUBLIC CHART_OPENGL)
endif()

IF(APPLE)
	INCLUDE_DIRECTORIES( /System/Library/Frameworks )
	FIND_LIBRARY(COCOA_LIBRARY Cocoa)
	FIND_LIBRARY(GLUT_LIBRARY GLUT )
	FIND_LIBRARY(OpenGL_LIBRARY OpenGL )
	MARK_AS_ADVANCED(COCOA_LIBRARY
					 GLUT_LIBRARY
					 OpenGL_LIBRARY)
	SET(EXTRA_LIBS ${COCOA_LIBRARY} ${GLUT_LIBRARY} ${OpenGL_LIBRARY})
	TARGET_LINK_LIBRARIES(${CORE_LIBRARY_NAME} PRIVATE ${EXTRA_LIBS})
	MESSAGE(STATUS "Extra Core: ${EXTRA_LIBS}")
ENDIF (APPLE)

INCLUDE(Modules)
MODULE_GENERATE_EXPORT_HEADER ( ${CORE_LIBRARY_NAME} )

TARGET_INCLUDE_DIRECTORIES(${CORE_LIBRARY_NAME} PUBLIC ${CMAKE_CURRENT_SOURCE_DIR} ${CMAKE_CURRENT_BINARY_DIR})

IF (openiA_PRECOMPILE)
	IF (CMAKE_MAJOR_VERSION GREATER 4 OR
	(CMAKE_MAJOR_VERSION EQUAL 3 AND CMAKE_MINOR_VERSION GREATER 15))
		INCLUDE(precompile.cmake)
		target_precompile_headers(${CORE_LIBRARY_NAME} PRIVATE ${OPENIA_PRECOMPILE_HEADERS})
	ENDIF()
ENDIF()

# Installation
IF (WIN32)
	INSTALL (TARGETS ${CORE_LIBRARY_NAME} RUNTIME DESTINATION .)
ELSEIF (FLATPAK_BUILD)
	INSTALL (TARGETS ${CORE_LIBRARY_NAME} LIBRARY DESTINATION lib)
ELSE ()
	INSTALL (TARGETS ${CORE_LIBRARY_NAME} LIBRARY DESTINATION .)
ENDIF(WIN32)

IF (MSVC)
	# Apply file grouping based on regular expressions for Visual Studio IDE.
	SOURCE_GROUP("UI Files" REGULAR_EXPRESSION "[.](ui|qrc)$")
ENDIF()

IF (openiA_USE_IDE_FOLDERS)
	SET_PROPERTY(TARGET ${CORE_LIBRARY_NAME} PROPERTY FOLDER "Libraries")
ENDIF()

