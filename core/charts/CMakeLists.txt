FILE( GLOB_RECURSE open_iA_chart_SRCS "*.cpp" "*.h" )
FILE( GLOB_RECURSE open_iA_chart_UI "*.ui" )
SET (open_iA_chart_QRC charts.qrc)

QT5_WRAP_UI( open_iA_chart_SRCS ${open_iA_chart_UI})
QT5_ADD_RESOURCES( open_iA_chart_SRCS ${open_iA_chart_QRC} )

SET (LIB_TYPE SHARED)
SET (CHART_LIBRARY_NAME charts)

# Generate core dll file / shared object:
add_library(${CHART_LIBRARY_NAME} ${LIB_TYPE} ${open_iA_chart_SRCS} ${open_iA_chart_QRC})

TARGET_LINK_LIBRARIES(${CHART_LIBRARY_NAME} PRIVATE base)

INCLUDE(Modules)
MODULE_GENERATE_EXPORT_HEADER ( ${CHART_LIBRARY_NAME} )

if (VTK_MAJOR_VERSION GREATER 8)
	vtk_module_autoinit(TARGETS ${CHART_LIBRARY_NAME} MODULES ${VTK_LIBRARIES})
endif()

IF (openiA_PRECOMPILE)
	IF (CMAKE_MAJOR_VERSION GREATER 4 OR
	(CMAKE_MAJOR_VERSION EQUAL 3 AND CMAKE_MINOR_VERSION GREATER 15))
		INCLUDE(precompile.cmake)
		target_precompile_headers(${CHART_LIBRARY_NAME} PRIVATE ${OPENIA_PRECOMPILE_HEADERS})
	ENDIF()
ENDIF()

if (openiA_CHART_OPENGL)
	TARGET_COMPILE_DEFINITIONS(${CHART_LIBRARY_NAME} PUBLIC CHART_OPENGL)
endif()

# ${CMAKE_CURRENT_SOURCE_DIR}/src 
TARGET_INCLUDE_DIRECTORIES(${CHART_LIBRARY_NAME} PUBLIC
	${CMAKE_CURRENT_SOURCE_DIR}/../base
	${CMAKE_CURRENT_SOURCE_DIR}
	${CMAKE_CURRENT_BINARY_DIR}) # for export header

IF (openiA_USE_IDE_FOLDERS)
	SET_PROPERTY(TARGET ${CHART_LIBRARY_NAME} PROPERTY FOLDER "Libraries")
ENDIF()