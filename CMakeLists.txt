CMAKE_MINIMUM_REQUIRED ( VERSION 3.0 )

PROJECT ( open_iA LANGUAGES CXX  )

set(CMAKE_DISABLE_IN_SOURCE_BUILD ON)
if("${CMAKE_SOURCE_DIR}" STREQUAL "${CMAKE_BINARY_DIR}")
  message(FATAL_ERROR "In-source builds in ${CMAKE_BINARY_DIR} are disabled to avoid "
   "cluttering the source repository. Please delete ./CMakeCache.txt and ./CMakeFiles/, "
   "and run cmake with a newly created build directory.")
endif("${CMAKE_SOURCE_DIR}" STREQUAL "${CMAKE_BINARY_DIR}")

INCLUDE (CTest)
enable_testing()

# Enable Unicode
ADD_DEFINITIONS(-DUNICODE -D_UNICODE)

IF(MSVC)
	SET( CMAKE_RUNTIME_OUTPUT_DIRECTORY_DEBUG "${CMAKE_BINARY_DIR}/x64/Debug")
	SET( CMAKE_RUNTIME_OUTPUT_DIRECTORY_RELEASE "${CMAKE_BINARY_DIR}/x64/Release")
	SET( CMAKE_RUNTIME_OUTPUT_DIRECTORY_RELWITHDEBINFO "${CMAKE_BINARY_DIR}/x64/RelWithDebInfo")
	SET( CMAKE_RUNTIME_OUTPUT_DIRECTORY_MINSIZEREL "${CMAKE_BINARY_DIR}/x64/MinSizeRel")

	IF (NOT EXISTS ${PROJECT_BINARY_DIR}/ALL_BUILD.vcxproj.user)
		CONFIGURE_FILE( ${PROJECT_SOURCE_DIR}/core/ALL_BUILD.vcxproj.user ${PROJECT_BINARY_DIR}/ALL_BUILD.vcxproj.user )
	ENDIF (NOT EXISTS ${PROJECT_BINARY_DIR}/ALL_BUILD.vcxproj.user)
ELSE(MSVC)
	SET( CMAKE_RUNTIME_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}/bin")
	SET( CMAKE_LIBRARY_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}/bin")
ENDIF(MSVC)

#-----------------------------------------------------------------------------------------
# PACKAGES
#-----------------------------------------------------------------------------------------


# ITK
FIND_PACKAGE(ITK)
IF(ITK_FOUND)
	INCLUDE(${ITK_USE_FILE})
#	INCLUDE_DIRECTORIES($ENV{ITK_APPS_SRC_PATH}/QtITK )
ELSE(ITK_FOUND)
	MESSAGE(FATAL_ERROR "Cannot build without ITK.  Please set ITK_DIR.")
ENDIF(ITK_FOUND)
IF(ITK_VERSION_MAJOR LESS 4)
	MESSAGE(FATAL_ERROR "Your ITK version is too old. Please use ITK >= 4.x")
ENDIF (ITK_VERSION_MAJOR LESS 4)
SET( ITK_LIBRARIES
	ITKBiasCorrection		ITKBioCell				ITKCommon			ITKIOImageBase
	ITKFEM					ITKIOBioRad				ITKIOBMP			ITKIOGDCM			ITKIOGE
	ITKIOGIPL				ITKIOHDF5				ITKIOIPL			ITKIOJPEG			ITKIOLSM
	ITKIOMeta				ITKIONIFTI				ITKIONRRD			ITKIOPNG			ITKIOSiemens
	ITKIOSpatialObjects		ITKIOStimulate			ITKIOTIFF			ITKIOVTK			ITKIOXML
	ITKVtkGlue				ITKKLMRegionGrowing		ITKMesh				ITKOptimizers		ITKPath
	ITKVNLInstantiation		ITKVTK					ITKWatersheds		ITKDICOMParser		ITKEXPAT
	ITKLabelMap
	itkhdf5					itkhdf5_cpp				itkjpeg				ITKMetaIO			itkNetlibSlatec
	ITKniftiio				ITKNrrdIO				itkopenjpeg			itkpng				itksys
	itktiff					itkv3p_netlib
	itkvcl					itkvnl					itkvnl_algo
	itkzlib					ITKznz
)
IF (NOT ${ITKGPUCommon_LIBRARY_DIRS} STREQUAL "")
	# cannot use ITKGPUCommon_LOADED - it is always defined - bug?
	SET( ITK_LIBRARIES  ${ITK_LIBRARIES}
		ITKGPUAnisotropicSmoothing
		ITKGPUCommon
		ITKGPUFiniteDifference
		ITKGPUImageFilterBase
		ITKGPUSmoothing
		ITKGPUThresholding)
ELSE(ITKGPUCommon_LOADED)
	IF (open_iA_GPU_USING_OPENCL)
		MESSAGE(SEND_ERROR "You're trying to build with GPU support (open_iA_GPU_USING_OPENCL), but your ITK build has GPU support disabled! Please build ITK libraries with ITK_USE_GPU enabled!")
	ENDIF()
ENDIF()
IF(ITK_VERSION_MAJOR GREATER 4 OR ITK_VERSION_MINOR GREATER 4)
	# starting with ITK 4.5, Review has a dependency on ITKIOMRC it seems:
	SET(ITK_LIBRARIES ${ITK_LIBRARIES} ITKIOMRC)
	IF (SCIFIO_LOADED)
		ADD_DEFINITIONS( -DUSE_SCIFIO )
		MESSAGE(STATUS "ITK has SCIFIO support enabled. Notice that in order to run a build with this library on another machine than the one you built it, the environment variable SCIFIO_PATH has to be set to the path containing the SCIFIO jar files! Otherwise loading images will fail!")
		SET (SCIFIO_PATH "${ITK_DIR}/lib/jars")
		IF (MSVC)
			# variable will be set to the debugging environment instead of copying (see gui/CMakeLists.txt)
		ELSE(MSVC)
			MESSAGE(STATUS "Copying SCIFIO jars from ${SCIFIO_PATH} to ${DESTDIR}")
			SET (DESTDIR "${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/scifio_jars")
			configure_file("${SCIFIO_PATH}/bioformats_package.jar" "${DESTDIR}/bioformats_package.jar" COPYONLY)
			configure_file("${SCIFIO_PATH}/scifio-itk-bridge.jar" "${DESTDIR}/scifio-itk-bridge.jar" COPYONLY)
		ENDIF(MSVC)
		INSTALL(FILES "${SCIFIO_PATH}/bioformats_package.jar" DESTINATION scifio_jars)
		INSTALL(FILES "${SCIFIO_PATH}/scifio-itk-bridge.jar" DESTINATION scifio_jars)
		SET(ITK_LIBRARIES ${ITK_LIBRARIES} SCIFIO)
	ENDIF(SCIFIO_LOADED)
ELSE ()
	SET(ITK_LIBRARIES ${ITK_LIBRARIES} ITKReview)
	
ENDIF(ITK_VERSION_MAJOR GREATER 4 OR ITK_VERSION_MINOR GREATER 4)

IF (MSVC)
	SET (ITK_REL_DIR "${ITK_DIR}/bin/Release")
	SET (ITK_VER "${ITK_VERSION_MAJOR}.${ITK_VERSION_MINOR}")
	INSTALL (FILES ${ITK_REL_DIR}/ITKCommon-${ITK_VER}.dll DESTINATION .)
	INSTALL (FILES ${ITK_REL_DIR}/ITKIOBioRad-${ITK_VER}.dll DESTINATION .)
	INSTALL (FILES ${ITK_REL_DIR}/ITKIOBMP-${ITK_VER}.dll DESTINATION .)
	INSTALL (FILES ${ITK_REL_DIR}/ITKIOGIPL-${ITK_VER}.dll DESTINATION .)
	INSTALL (FILES ${ITK_REL_DIR}/ITKIOImageBase-${ITK_VER}.dll DESTINATION .)
	INSTALL (FILES ${ITK_REL_DIR}/ITKIOPNG-${ITK_VER}.dll DESTINATION .)
	INSTALL (FILES ${ITK_REL_DIR}/ITKIOStimulate-${ITK_VER}.dll DESTINATION .)
	INSTALL (FILES ${ITK_REL_DIR}/ITKIOVTK-${ITK_VER}.dll DESTINATION .)
	INSTALL (FILES ${ITK_REL_DIR}/ITKIOGDCM-${ITK_VER}.dll DESTINATION .)
	INSTALL (FILES ${ITK_REL_DIR}/ITKIOGE-${ITK_VER}.dll DESTINATION .)
	INSTALL (FILES ${ITK_REL_DIR}/ITKIOIPL-${ITK_VER}.dll DESTINATION .)
	INSTALL (FILES ${ITK_REL_DIR}/ITKIOHDF5-${ITK_VER}.dll DESTINATION .)
	INSTALL (FILES ${ITK_REL_DIR}/ITKIOJPEG-${ITK_VER}.dll DESTINATION .)
	INSTALL (FILES ${ITK_REL_DIR}/ITKIOLSM-${ITK_VER}.dll DESTINATION .)
	INSTALL (FILES ${ITK_REL_DIR}/ITKIOMRC-${ITK_VER}.dll DESTINATION .)
	INSTALL (FILES ${ITK_REL_DIR}/ITKSCIFIO-${ITK_VER}.dll DESTINATION .)
	INSTALL (FILES ${ITK_REL_DIR}/ITKIOTIFF-${ITK_VER}.dll DESTINATION .)
	INSTALL (FILES ${ITK_REL_DIR}/ITKIOMeta-${ITK_VER}.dll DESTINATION .)
	INSTALL (FILES ${ITK_REL_DIR}/ITKIONIFTI-${ITK_VER}.dll DESTINATION .)
	INSTALL (FILES ${ITK_REL_DIR}/ITKIONRRD-${ITK_VER}.dll DESTINATION .)
	INSTALL (FILES ${ITK_REL_DIR}/ITKTransform-${ITK_VER}.dll DESTINATION .)
ENDIF(MSVC)


# VTK
FIND_PACKAGE(VTK)
IF(VTK_FOUND)
	INCLUDE(${VTK_USE_FILE})
	include_directories(${VTK_INCLUDE_DIRS})
ELSE(VTK_FOUND)
	MESSAGE(FATAL_ERROR "Cannot build without VTK.  Please set VTK_DIR.")
ENDIF(VTK_FOUND)
IF(VTK_VERSION_MAJOR LESS 6)
	MESSAGE(FATAL_ERROR "Your VTK version is too old. Please use VTK >= 6.0")
ENDIF(VTK_VERSION_MAJOR LESS 6)
SET (VTK_LIBRARIES
	vtkCommonCore
	vtkChartsCore
	vtkDICOMParser
	vtkFiltersCore
	vtkGUISupportQt
	vtkGUISupportQtOpenGL
	vtkImagingCore
	vtkImagingStatistics
	vtkInfovisCore
	vtkIOCore
	vtkIOMovie
	vtkIOGeometry
	vtkIOXML
	vtkRenderingContext2D
	vtkRenderingImage
	vtkViewsCore
	vtkViewsInfovis
	vtksys)
SET (VTK_VER "${VTK_VERSION_MAJOR}.${VTK_VERSION_MINOR}")
SET (VTK_REL_DIR "${VTK_DIR}/bin/Release")
IF ("${VTK_RENDERING_BACKEND}" STREQUAL "OpenGL2")
	ADD_DEFINITIONS(-DVTK_OPENGL2_BACKEND)
	SET (VTK_LIBRARIES ${VTK_LIBRARIES}	vtkRenderingOpenGL2)
	IF (MSVC)
		INSTALL (FILES ${VTK_REL_DIR}/vtkRenderingOpenGL2-${VTK_VER}.dll DESTINATION .)
	ENDIF (MSVC)
ELSE ("${VTK_RENDERING_BACKEND}" STREQUAL "OpenGL2")
	SET( VTK_LIBRARIES ${VTK_LIBRARIES}	vtkRenderingOpenGL)
	IF (MSVC)
		INSTALL (FILES ${VTK_REL_DIR}/vtkRenderingOpenGL-${VTK_VER}.dll DESTINATION .)
	ENDIF (MSVC)
ENDIF("${VTK_RENDERING_BACKEND}" STREQUAL "OpenGL2")
IF (VTK_VERSION_MAJOR GREATER 6 OR VTK_VERSION_MINOR GREATER 0)
	SET (VTK_LIBRARIES ${VTK_LIBRARIES}
		vtkRenderingCore
		vtkRenderingFreeType
		vtkRenderingQt
		vtkViewsContext2D)
	IF ("${VTK_RENDERING_BACKEND}" STREQUAL "OpenGL2")
		SET (VTK_LIBRARIES ${VTK_LIBRARIES}	vtkRenderingVolumeOpenGL2)
		IF (MSVC)
			INSTALL (FILES ${VTK_REL_DIR}/vtkRenderingVolumeOpenGL2-${VTK_VER}.dll DESTINATION .)
		ENDIF(MSVC)
	ELSE()
		SET (VTK_LIBRARIES ${VTK_LIBRARIES}	vtkRenderingVolumeOpenGL)
		IF (MSVC)
			INSTALL (FILES ${VTK_REL_DIR}/vtkRenderingVolumeOpenGL-${VTK_VER}.dll DESTINATION .)
		ENDIF(MSVC)
	ENDIF()
ENDIF (VTK_VERSION_MAJOR GREATER 6 OR  VTK_VERSION_MINOR GREATER 0)
IF (VTK_VERSION_MAJOR GREATER 6 OR VTK_VERSION_MINOR GREATER 1)
	IF ("${VTK_RENDERING_BACKEND}" STREQUAL "OpenGL2")
		SET (VTK_LIBRARIES ${VTK_LIBRARIES}	vtkRenderingContextOpenGL2)
		IF (MSVC)
			INSTALL (FILES ${VTK_REL_DIR}/vtkRenderingContextOpenGL2-${VTK_VER}.dll DESTINATION .)
		ENDIF(MSVC)
	ELSE()
		SET (VTK_LIBRARIES ${VTK_LIBRARIES}	vtkRenderingContextOpenGL)
		IF (MSVC)
			INSTALL (FILES ${VTK_REL_DIR}/vtkRenderingContextOpenGL-${VTK_VER}.dll DESTINATION .)
		ENDIF(MSVC)
	ENDIF()
ENDIF (VTK_VERSION_MAJOR GREATER 6 OR VTK_VERSION_MINOR GREATER 1)
IF (vtkoggtheora_LOADED)
	MESSAGE(STATUS "Video: Ogg Theora Encoder available")
	ADD_DEFINITIONS(-DVTK_USE_OGGTHEORA_ENCODER)
ENDIF(vtkoggtheora_LOADED)

IF(MSVC)
	INSTALL (FILES ${VTK_REL_DIR}/vtkalglib-${VTK_VER}.dll DESTINATION .)
	INSTALL (FILES ${VTK_REL_DIR}/vtkexoIIc-${VTK_VER}.dll DESTINATION .)
	INSTALL (FILES ${VTK_REL_DIR}/vtkexpat-${VTK_VER}.dll DESTINATION .)
	INSTALL (FILES ${VTK_REL_DIR}/vtkfreetype-${VTK_VER}.dll DESTINATION .)
	INSTALL (FILES ${VTK_REL_DIR}/vtkhdf5-${VTK_VER}.dll DESTINATION .)
	INSTALL (FILES ${VTK_REL_DIR}/vtkjpeg-${VTK_VER}.dll DESTINATION .)
	INSTALL (FILES ${VTK_REL_DIR}/vtklibxml2-${VTK_VER}.dll DESTINATION .)
	INSTALL (FILES ${VTK_REL_DIR}/vtkmetaio-${VTK_VER}.dll DESTINATION .)
	INSTALL (FILES ${VTK_REL_DIR}/vtkpng-${VTK_VER}.dll DESTINATION .)
	INSTALL (FILES ${VTK_REL_DIR}/vtksys-${VTK_VER}.dll DESTINATION .)
	INSTALL (FILES ${VTK_REL_DIR}/vtktiff-${VTK_VER}.dll DESTINATION .)
	INSTALL (FILES ${VTK_REL_DIR}/vtkverdict-${VTK_VER}.dll DESTINATION .)
	INSTALL (FILES ${VTK_REL_DIR}/vtkzlib-${VTK_VER}.dll DESTINATION .)
	INSTALL (FILES ${VTK_REL_DIR}/QVTKWidgetPlugin.dll DESTINATION .)
	INSTALL (FILES ${VTK_REL_DIR}/vtkChartsCore-${VTK_VER}.dll DESTINATION .)
	INSTALL (FILES ${VTK_REL_DIR}/vtkCommonColor-${VTK_VER}.dll DESTINATION .)
	INSTALL (FILES ${VTK_REL_DIR}/vtkCommonCore-${VTK_VER}.dll DESTINATION .)
	INSTALL (FILES ${VTK_REL_DIR}/vtkCommonComputationalGeometry-${VTK_VER}.dll DESTINATION .)
	INSTALL (FILES ${VTK_REL_DIR}/vtkCommonExecutionModel-${VTK_VER}.dll DESTINATION .)
	INSTALL (FILES ${VTK_REL_DIR}/vtkCommonDataModel-${VTK_VER}.dll DESTINATION .)
	INSTALL (FILES ${VTK_REL_DIR}/vtkCommonMath-${VTK_VER}.dll DESTINATION .)
	INSTALL (FILES ${VTK_REL_DIR}/vtkCommonMisc-${VTK_VER}.dll DESTINATION .)
	INSTALL (FILES ${VTK_REL_DIR}/vtkCommonSystem-${VTK_VER}.dll DESTINATION .)
	INSTALL (FILES ${VTK_REL_DIR}/vtkCommonTransforms-${VTK_VER}.dll DESTINATION .)
	INSTALL (FILES ${VTK_REL_DIR}/vtkDICOMParser-${VTK_VER}.dll DESTINATION .)
	INSTALL (FILES ${VTK_REL_DIR}/vtkGUISupportQt-${VTK_VER}.dll DESTINATION .)
	INSTALL (FILES ${VTK_REL_DIR}/vtkGUISupportQtOpenGL-${VTK_VER}.dll DESTINATION .)
	INSTALL (FILES ${VTK_REL_DIR}/vtkFiltersCore-${VTK_VER}.dll DESTINATION .)
	INSTALL (FILES ${VTK_REL_DIR}/vtkFiltersExtraction-${VTK_VER}.dll DESTINATION .)
	INSTALL (FILES ${VTK_REL_DIR}/vtkFiltersGeneral-${VTK_VER}.dll DESTINATION .)
	INSTALL (FILES ${VTK_REL_DIR}/vtkFiltersGeometry-${VTK_VER}.dll DESTINATION .)
	INSTALL (FILES ${VTK_REL_DIR}/vtkFiltersHybrid-${VTK_VER}.dll DESTINATION .)
	INSTALL (FILES ${VTK_REL_DIR}/vtkFiltersImaging-${VTK_VER}.dll DESTINATION .)
	INSTALL (FILES ${VTK_REL_DIR}/vtkFiltersModeling-${VTK_VER}.dll DESTINATION .)
	INSTALL (FILES ${VTK_REL_DIR}/vtkFiltersSources-${VTK_VER}.dll DESTINATION .)
	INSTALL (FILES ${VTK_REL_DIR}/vtkFiltersStatistics-${VTK_VER}.dll DESTINATION .)
	INSTALL (FILES ${VTK_REL_DIR}/vtkFiltersTexture-${VTK_VER}.dll DESTINATION .)
	INSTALL (FILES ${VTK_REL_DIR}/vtkIOCore-${VTK_VER}.dll DESTINATION .)
	INSTALL (FILES ${VTK_REL_DIR}/vtkIOGeometry-${VTK_VER}.dll DESTINATION .)
	INSTALL (FILES ${VTK_REL_DIR}/vtkIOImage-${VTK_VER}.dll DESTINATION .)
	INSTALL (FILES ${VTK_REL_DIR}/vtkIOMovie-${VTK_VER}.dll DESTINATION .)
	INSTALL (FILES ${VTK_REL_DIR}/vtkIOXML-${VTK_VER}.dll DESTINATION .)
	INSTALL (FILES ${VTK_REL_DIR}/vtkIOXMLParser-${VTK_VER}.dll DESTINATION .)
	INSTALL (FILES ${VTK_REL_DIR}/vtkImagingColor-${VTK_VER}.dll DESTINATION .)
	INSTALL (FILES ${VTK_REL_DIR}/vtkImagingCore-${VTK_VER}.dll DESTINATION .)
	INSTALL (FILES ${VTK_REL_DIR}/vtkImagingGeneral-${VTK_VER}.dll DESTINATION .)
	INSTALL (FILES ${VTK_REL_DIR}/vtkImagingFourier-${VTK_VER}.dll DESTINATION .)
	INSTALL (FILES ${VTK_REL_DIR}/vtkImagingHybrid-${VTK_VER}.dll DESTINATION .)
	INSTALL (FILES ${VTK_REL_DIR}/vtkImagingSources-${VTK_VER}.dll DESTINATION .)
	INSTALL (FILES ${VTK_REL_DIR}/vtkImagingStatistics-${VTK_VER}.dll DESTINATION .)
	INSTALL (FILES ${VTK_REL_DIR}/vtkInfovisCore-${VTK_VER}.dll DESTINATION .)
	INSTALL (FILES ${VTK_REL_DIR}/vtkInfovisLayout-${VTK_VER}.dll DESTINATION .)
	INSTALL (FILES ${VTK_REL_DIR}/vtkInteractionStyle-${VTK_VER}.dll DESTINATION .)
	INSTALL (FILES ${VTK_REL_DIR}/vtkInteractionWidgets-${VTK_VER}.dll DESTINATION .)
	INSTALL (FILES ${VTK_REL_DIR}/vtkjsoncpp-${VTK_VER}.dll DESTINATION .)
	INSTALL (FILES ${VTK_REL_DIR}/vtkoggtheora-${VTK_VER}.dll DESTINATION .)
	INSTALL (FILES ${VTK_REL_DIR}/vtkRenderingAnnotation-${VTK_VER}.dll DESTINATION .)
	INSTALL (FILES ${VTK_REL_DIR}/vtkRenderingContext2D-${VTK_VER}.dll DESTINATION .)
	INSTALL (FILES ${VTK_REL_DIR}/vtkRenderingCore-${VTK_VER}.dll DESTINATION .)
	INSTALL (FILES ${VTK_REL_DIR}/vtkRenderingFreeType-${VTK_VER}.dll DESTINATION .)
	INSTALL (FILES ${VTK_REL_DIR}/vtkRenderingImage-${VTK_VER}.dll DESTINATION .)
	INSTALL (FILES ${VTK_REL_DIR}/vtkRenderingLabel-${VTK_VER}.dll DESTINATION .)
	INSTALL (FILES ${VTK_REL_DIR}/vtkRenderingQt-${VTK_VER}.dll DESTINATION .)
	INSTALL (FILES ${VTK_REL_DIR}/vtkRenderingLabel-${VTK_VER}.dll DESTINATION .)
	INSTALL (FILES ${VTK_REL_DIR}/vtkRenderingVolume-${VTK_VER}.dll DESTINATION .)
	INSTALL (FILES ${VTK_REL_DIR}/vtkViewsCore-${VTK_VER}.dll DESTINATION .)
	INSTALL (FILES ${VTK_REL_DIR}/vtkViewsContext2D-${VTK_VER}.dll DESTINATION .)
	INSTALL (FILES ${VTK_REL_DIR}/vtkViewsInfovis-${VTK_VER}.dll DESTINATION .)
	INSTALL (FILES ${VTK_REL_DIR}/vtkGUISupportQtOpenGL-${VTK_VER}.dll DESTINATION .)
	IF (${VTK_MAJOR_VERSION} LESS 7 AND ${VTK_MINOR_VERSION} LESS 3)
		INSTALL (FILES ${VTK_REL_DIR}/vtkRenderingFreeTypeOpenGL-${VTK_VER}.dll DESTINATION .)
	ENDIF()
ENDIF(MSVC)


# Qt
SET(CMAKE_AUTOMOC ON)
SET(QT_USE_QTXML TRUE)
IF (WIN32)
	SET( CMAKE_LIBRARY_PATH ${CMAKE_LIBRARY_PATH} "C:/Program Files (x86)/Windows Kits/8.1/Lib/winv6.3/um/x64" )
ENDIF (WIN32)

FIND_PACKAGE(Qt5 COMPONENTS Widgets Xml Network Test OpenGL PrintSupport REQUIRED)
# Qt5OpenGL_INCLUDE_DIRS seems to be required on linux only, but doesn't hurt on Windows:
INCLUDE_DIRECTORIES(${Qt5Widgets_INCLUDE_DIRS} ${Qt5OpenGL_INCLUDE_DIRS} )

SET(QT_LIBRARIES ${Qt5Core_LIBRARIES} ${Qt5Xml_LIBRARIES} ${Qt5OpenGL_LIBRARIES} ${Qt5Network_LIBRARIES} ${Qt5PrintSupport_LIBRARIES})

IF(MSVC)
	#Qt
	STRING(REGEX REPLACE "/lib/cmake/Qt5" "" Qt5_BASEDIR ${Qt5_DIR})
	INSTALL (FILES ${Qt5_BASEDIR}/bin/Qt5Core.dll DESTINATION .)
	INSTALL (FILES ${Qt5_BASEDIR}/bin/Qt5Gui.dll DESTINATION .)
	INSTALL (FILES ${Qt5_BASEDIR}/bin/Qt5OpenGL.dll DESTINATION .)
	INSTALL (FILES ${Qt5_BASEDIR}/bin/Qt5Widgets.dll DESTINATION .)
	INSTALL (FILES ${Qt5_BASEDIR}/bin/Qt5Xml.dll DESTINATION .)
	INSTALL (FILES ${Qt5_BASEDIR}/bin/Qt5PrintSupport.dll DESTINATION .)
	INSTALL (FILES ${Qt5_BASEDIR}/plugins/platforms/qwindows.dll DESTINATION platforms)
# TODO: installation for other platforms!
ENDIF(MSVC)


IF (CMAKE_COMPILER_IS_GNUCXX)
	SET (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fPIE")
	SET (CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -fPIE")
ENDIF()

SET(CMAKE_MODULE_PATH "${PROJECT_SOURCE_DIR}/cmake/Modules")


# Eigen
FIND_PACKAGE(Eigen3)
IF(EIGEN3_FOUND)
	ADD_DEFINITIONS( -DUSE_EIGEN )
	INCLUDE_DIRECTORIES( ${EIGEN3_INCLUDE_DIR} )
ENDIF(EIGEN3_FOUND)


#OPENCL selection
option (open_iA_GPU_USING_OPENCL "" OFF)

IF(open_iA_GPU_USING_OPENCL)
	INCLUDE(${PROJECT_SOURCE_DIR}/cmake/Modules/FindOpenCL.cmake)

	IF(OPENCL_FOUND)
		INCLUDE_DIRECTORIES( ${OPENCL_INCLUDE_DIRS} )
	ELSE(OPENCL_FOUND)
	#try again with modified ITK-version of FindOpenCL.cmake
		INCLUDE(${PROJECT_SOURCE_DIR}/cmake/Modules/FindOpenCL2.cmake)
	ELSE(OPENCL_FOUND)
		MESSAGE(SEND_ERROR "OpenCL is not found. Please check your configuration.")
	ENDIF(OPENCL_FOUND)
ENDIF(open_iA_GPU_USING_OPENCL)


#OpenMP
INCLUDE(${CMAKE_ROOT}/Modules/FindOpenMP.cmake)
SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS}")
SET(CMAKE_CXX_FLAGS "${CMAKE_C_FLAGS} ${OpenMP_C_FLAGS}")

if (CMAKE_COMPILER_IS_GNUCXX)
	include(CheckCXXCompilerFlag)
	CHECK_CXX_COMPILER_FLAG("-std=c++11" COMPILER_SUPPORTS_CXX11)
	CHECK_CXX_COMPILER_FLAG("-std=c++0x" COMPILER_SUPPORTS_CXX0X)

	IF (COMPILER_SUPPORTS_CXX11)
		SET (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11")
	ELSEIF (COMPILER_SUPPORTS_CXX0X)
		SET (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++0x")
	ELSE ()
		message(WARN "The compiler ${CMAKE_CXX_COMPILER} has no C++11 support. Please use a different C++ compiler.")
	ENDIF(COMPILER_SUPPORTS_CXX11)

	execute_process(COMMAND ${CMAKE_CXX_COMPILER} -dumpversion OUTPUT_VARIABLE GCC_VERSION)
	string(REGEX MATCHALL "[0-9]+" GCC_VERSION_COMPONENTS ${GCC_VERSION})
	list(GET GCC_VERSION_COMPONENTS 0 GCC_MAJOR)
	list(GET GCC_VERSION_COMPONENTS 1 GCC_MINOR)

	SET (CTEST_BUILD_COMMAND "make -i -j8")

	IF (GCC_MAJOR GREATER 3)
		IF (GCC_MINOR GREATER 2)
			set ( CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -pipe -msse4.1 -fpermissive -lgomp -march=core2 -O2")
			set ( CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -pipe -msse4.1 -lgomp -march=core2 -O2")
		ENDIF(GCC_MINOR GREATER 2)
	ELSE (GCC_MINOR GREATER 2)
		set ( CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -pipe -fpermissive -lgomp")
	ENDIF (GCC_MAJOR GREATER 3)

	IF (${CMAKE_SYSTEM_NAME} MATCHES "Darwin")
		# Mac OS X specific code
		MESSAGE (STATUS "You are using Apple.")
		#set ( CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS}")
		#MESSAGE (STATUS "${CMAKE_C_FLAGS}")
	ENDIF (${CMAKE_SYSTEM_NAME} MATCHES "Darwin")

ENDIF (CMAKE_COMPILER_IS_GNUCXX)

SET (CORE_LIBRARY_NAME open_iA_Core)
SET (Toolkit_DIR "${PROJECT_SOURCE_DIR}/Toolkit")

ADD_SUBDIRECTORY(Toolkit)
ADD_SUBDIRECTORY(core)
ADD_SUBDIRECTORY(modules)

IF (NOT DONT_BUILD_OPEN_IA_GUI)
	ADD_SUBDIRECTORY(gui)
ENDIF (NOT DONT_BUILD_OPEN_IA_GUI)

# INCLUDE_DIRECTORIES( ${CMAKE_CURRENT_BINARY_DIR}/Toolkit )

# Configure the default TESTING_DATA_ROOT for the location of Data.
set(TESTING_DATA_OUTPUT ${PROJECT_SOURCE_DIR}/Test_files/TestITK/Output)

#ITK testing
option (open_iA_TEST_ITK "" OFF)
if(open_iA_TEST_ITK)
	add_subdirectory("${PROJECT_SOURCE_DIR}/Test_files/TestITK")
endif(open_iA_TEST_ITK)

INSTALL(FILES ${CMAKE_SOURCE_DIR}/LICENSE DESTINATION .)
INSTALL(FILES ${CMAKE_SOURCE_DIR}/README.md DESTINATION .)
include (CMakeCPack.cmake)